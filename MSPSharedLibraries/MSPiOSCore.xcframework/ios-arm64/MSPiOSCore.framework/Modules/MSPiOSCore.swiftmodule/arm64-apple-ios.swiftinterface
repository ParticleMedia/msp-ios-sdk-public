// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MSPiOSCore
import Foundation
@_exported import MSPiOSCore
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol LoadAdParameters : MSPiOSCore.AdapterParameters {
  func getAdUnitId() -> Swift.String
  func getThirdPartyAdPlacementId() -> Swift.String
  func getBidPayload() -> Swift.String
  func getBidExpirationMillis() -> Swift.UInt64
}
open class BidLoader {
  public var googleQueryInfoFetcher: any MSPiOSCore.GoogleQueryInfoFetcher
  public var facebookBidTokenProvider: any MSPiOSCore.FacebookBidTokenProvider
  public init(googleQueryInfoFetcher: any MSPiOSCore.GoogleQueryInfoFetcher, facebookBidTokenProvider: any MSPiOSCore.FacebookBidTokenProvider)
  open func loadBid(placementId: Swift.String, adParams: [Swift.String : Any], bidListener: any MSPiOSCore.BidListener, adRequest: MSPiOSCore.AdRequest)
  @objc deinit
}
public enum AdapterAdLoadError {
  case NO_FILL
  public static func == (a: MSPiOSCore.AdapterAdLoadError, b: MSPiOSCore.AdapterAdLoadError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MediaListener {
  func onDurationUpdate(duration: Swift.UInt64)
  func onProgressUpdate(position: Swift.UInt64, bufferedPosition: Swift.UInt64)
}
public protocol GoogleQueryInfoListener {
  func onComplete(queryInfo: Swift.String)
}
public enum AdapterInitStatus : Swift.String {
  case SUCCESS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class AdRequest {
  public var customParams: [Swift.String : Any]
  public var geo: MSPiOSCore.Geo?
  public var context: Any?
  public var adaptiveBannerSize: MSPiOSCore.AdSize?
  public var adSize: MSPiOSCore.AdSize?
  public var placementId: Swift.String
  public var adFormat: MSPiOSCore.AdFormat
  public var isCacheSupported: Swift.Bool
  public init(customParams: [Swift.String : Any], geo: MSPiOSCore.Geo?, context: Any?, adaptiveBannerSize: MSPiOSCore.AdSize?, adSize: MSPiOSCore.AdSize?, placementId: Swift.String, adFormat: MSPiOSCore.AdFormat, isCacheSupported: Swift.Bool = false)
  @objc deinit
}
public struct AdSize {
  public let width: Swift.Int
  public let height: Swift.Int
  public let isInlineAdaptiveBanner: Swift.Bool
  public let isAnchorAdaptiveBanner: Swift.Bool
  public init(width: Swift.Int, height: Swift.Int, isInlineAdaptiveBanner: Swift.Bool = false, isAnchorAdaptiveBanner: Swift.Bool = false)
}
public protocol FacebookBidTokenListener {
  func onComplete(bidToken: Swift.String)
}
public protocol BidListener {
  func onBidResponse(bidResponse: Any, adNetwork: MSPiOSCore.AdNetwork)
  func onError(msg: Swift.String)
}
public protocol AdapterAdLoadListener {
  func onAdLoadedFailed(error: MSPiOSCore.AdapterAdLoadError)
}
public protocol AdListener {
  func onAdLoaded(ad: MSPiOSCore.MSPAd)
  func onError(msg: Swift.String)
  func onAdImpression(ad: MSPiOSCore.MSPAd)
  func onAdClick(ad: MSPiOSCore.MSPAd)
  func onAdLoaded(placementId: Swift.String)
}
public protocol AdNetworkAdapter {
  func loadAdCreative(bidResponse: Any, adListener: any MSPiOSCore.AdListener, context: Any, adRequest: MSPiOSCore.AdRequest)
  func initialize(initParams: any MSPiOSCore.InitializationParameters, adapterInitListener: any MSPiOSCore.AdapterInitListener, context: Any?)
  func destroyAd()
  func prepareViewForInteraction(nativeAd: MSPiOSCore.NativeAd, nativeAdView: Any)
}
public protocol GoogleQueryInfoFetcher {
  func fetch(completeListener: any MSPiOSCore.GoogleQueryInfoListener, adRequest: MSPiOSCore.AdRequest)
}
public protocol AdNetworkAdapterProvider {
  func getAdNetworkAdapter(adNetwork: MSPiOSCore.AdNetwork) -> (any MSPiOSCore.AdNetworkAdapter)?
  func getAdNetworkAdaptersCount() -> Swift.Int
}
public protocol BidLoaderProvider {
  func getBidLoader() -> MSPiOSCore.BidLoader
}
open class AdNetworkManager {
  public init()
  open func getAdNetworkAdapter() -> (any MSPiOSCore.AdNetworkAdapter)?
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NativeAd : MSPiOSCore.MSPAd {
  @objc deinit
}
public protocol FacebookBidTokenProvider {
  func fetch(completeListener: any MSPiOSCore.FacebookBidTokenListener, context: Any)
}
public protocol AdapterParameters {
  func getParameters() -> [Swift.String : Any]?
  func hasUserConsent() -> Swift.Bool
  func isAgeRestrictedUser() -> Swift.Bool
  func isDoNotSell() -> Swift.Bool
  func getConsentString() -> Swift.String
  func isInTestMode() -> Swift.Bool
}
public enum AdFormat {
  case banner
  case native
  case multi_format
  case interstitial
  public static func == (a: MSPiOSCore.AdFormat, b: MSPiOSCore.AdFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MSPInitListener {
  func onComplete(status: MSPiOSCore.MSPInitStatus, message: Swift.String)
}
public protocol MSPInitializationParameters : MSPiOSCore.InitializationParameters {
}
open class MSPAd {
  public var adNetworkAdapter: any MSPiOSCore.AdNetworkAdapter
  public var adInfo: [Swift.String : Any]
  public init(adNetworkAdapter: any MSPiOSCore.AdNetworkAdapter)
  public func destroy()
  @objc deinit
}
public protocol MediaController {
  func addMediaListener(listener: any MSPiOSCore.MediaListener)
  func removeMediaListener(listener: any MSPiOSCore.MediaListener)
}
public protocol InitializationParameters : MSPiOSCore.AdapterParameters {
  func getPrebidAPIKey() -> Swift.String
  func getPrebidHostUrl() -> Swift.String
}
public enum AdNetwork : Swift.String {
  case google
  case facebook
  case prebid
  case nova
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol AdapterInitListener {
  func onComplete(adNetwork: MSPiOSCore.AdNetwork, adapterInitStatus: MSPiOSCore.AdapterInitStatus, message: Swift.String)
}
public enum MSPInitStatus {
  case SUCCESS
  public static func == (a: MSPiOSCore.MSPInitStatus, b: MSPiOSCore.MSPInitStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Geo {
  public let city: Swift.String
  public let stateCode: Swift.String
  public let zipCode: Swift.String
  public let lat: Swift.String
  public let lon: Swift.String
  public init(city: Swift.String = "", stateCode: Swift.String = "", zipCode: Swift.String = "", lat: Swift.String = "", lon: Swift.String = "")
}
extension MSPiOSCore.AdapterAdLoadError : Swift.Equatable {}
extension MSPiOSCore.AdapterAdLoadError : Swift.Hashable {}
extension MSPiOSCore.AdapterInitStatus : Swift.Equatable {}
extension MSPiOSCore.AdapterInitStatus : Swift.Hashable {}
extension MSPiOSCore.AdapterInitStatus : Swift.RawRepresentable {}
extension MSPiOSCore.AdFormat : Swift.Equatable {}
extension MSPiOSCore.AdFormat : Swift.Hashable {}
extension MSPiOSCore.AdNetwork : Swift.Equatable {}
extension MSPiOSCore.AdNetwork : Swift.Hashable {}
extension MSPiOSCore.AdNetwork : Swift.RawRepresentable {}
extension MSPiOSCore.MSPInitStatus : Swift.Equatable {}
extension MSPiOSCore.MSPInitStatus : Swift.Hashable {}
